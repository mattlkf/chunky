// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "src/protos/common/common.proto";

package master;

// The greeting service definition.
service Master {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // Sends another greeting
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}

  /* // Receive a heartbeat from chunkserver */
  rpc SendHeartbeat (ChunkserverHeartbeat) returns (ChunkserverHeartbeatReply) {}

  /* // Receive a list of chunks held by a chunkserver */
  rpc SendChunkList (ChunkserverChunkList) returns (ChunkserverChunkListReply) {}

  rpc AllocateChunk (ClientAllocateChunk) returns (ClientAllocateChunkReply) {}

  rpc ReadChunk (ClientReadChunk) returns (ClientReadChunkReply) {}

  rpc WriteChunk (ClientWriteChunk) returns (ClientWriteChunkReply) {}
}

// [Testing] The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// [Testing] The response message containing the greetings
message HelloReply {
  string message = 1;
}

// Message sent from chunkserver to master periodically
message ChunkserverHeartbeat {
  string chunkserver_name = 1;
}

// Reply from master. Master indicates if it needs chunkserver to send it the chunk list
message ChunkserverHeartbeatReply {
  bool update_needed = 1;
}

message ChunkserverChunkList {
  string chunkserver_name = 1;
  repeated common.Chunk chunks = 2;
}

message ChunkserverChunkListReply {
}

// TODO: merge all into one?? (Nope.)
message ClientAllocateChunk {
  string client_name = 1;
  string file_name = 2;
  int32 chunk_index = 3;
}

message ClientAllocateChunkReply {
  ClientAllocateChunk request = 1;
  string chunk_handle = 2;
  repeated string chunkserver_names = 3;
}

message ClientReadChunk {
  string client_name = 1;
  string file_name = 2;
  int32 chunk_index = 3;
}

message ClientReadChunkReply {
  ClientReadChunk request = 1;
  string chunk_handle = 2;
  repeated string chunkserver_names = 3;
}

message ClientWriteChunk {
  string client_name = 1;
  string file_name = 2;
  int32 chunk_index = 3;
}

message ClientWriteChunkReply {
  ClientWriteChunk request = 1;
  string chunk_handle = 2;
  repeated string chunkserver_names = 3;
}
